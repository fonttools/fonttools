[tox]
minversion = 4.0
envlist = lint, cleancov, py3{9,10,11,12,13}-cov, htmlcov
skip_missing_interpreters = true

[testenv]
runner = uv-venv-lock-runner
package = wheel
wheel_build_env = .pkg
extras =
    !noextra: all
dependency_groups =
    dev
    !noextra: test-additions
setenv =
    cy: FONTTOOLS_WITH_CYTHON=1
; # use 'download = true' to have tox install the latest pip inside the virtualenv.
; # We need this to be able to install skia-pathops on Linux, which uses a
; # relatively recent 'manylinux2014' platform tag.
; # https://github.com/tox-dev/tox/issues/791#issuecomment-518713438
; download = true
; # building lxml from source takes too long on CI, force it to download pre-compiled
; # wheel or fail if none is found with --only-binary=lxml
; install_command = python -m pip install --only-binary=lxml {opts} {packages}
; # exclude pytest 8.0.{1,2} because our tests mysteriously fail with those
; # https://github.com/fonttools/fonttools/issues/3458
; deps =
;     cov: coverage>=4.3
;     pytest>=7.0.0,!=8.0.1,!=8.0.2
;     pytest-randomly
;     # add -noextra to tox -e to skip installing extras and only test the core fonttools
;     !noextra: -rrequirements.txt
commands =
    cy: python -c "from fontTools.cu2qu.cu2qu import COMPILED; assert COMPILED"
    !cy: python -c "from fontTools.cu2qu.cu2qu import COMPILED; assert not COMPILED"
    cov: pytest --cov --cov-report= --cov-append {posargs}
    !cov: pytest {posargs:Tests fontTools}
; depends =
;     py3{8,9,10,11,12,13}-cov: cleancov
;     htmlcov: py3{8,9,10,11,12,13}-cov

[testenv:cleancov]
runner = uv-venv-lock-runner
dependency_groups =
    codecov
skip_install = true
commands =
    coverage erase

[testenv:htmlcov]
runner = uv-venv-lock-runner
dependency_groups =
    codecov
skip_install = true
commands =
    coverage html

[testenv:lint]
runner = uv-venv-lock-runner
with_dev = true
skip_install = true
commands =
    black --check --diff .
    mypy

[testenv:codecov]
runner = uv-venv-lock-runner
passenv = *
dependency_groups =
    codecov
ignore_outcome = true
commands =
    codecov --env TOXENV

[testenv:package_readme]
description = check that the long description is valid (need for PyPi)
runner = uv-venv-lock-runner
dependency_groups =
    twine
skip_install = true
commands =
    uv build --quiet --wheel --out-dir {envtmpdir}/build
    twine check {envtmpdir}/build/*

[testenv:docs]
description = Build the documentation.
runner = uv-venv-lock-runner
extras =
    all
dependency_groups =
    docs
commands =
    sphinx-build -W -j auto Doc/source Doc/build
